# run on sagemath
# construct the easy instance of RSL from RVDC

(q,m,n,k,t) = (2,31,26,13,8)
Fqm = GF(q^m)
P.<XX> = Fqm[]
R.<X> = QuotientRing(P, P.ideal(XX^k-1))

def circulant_matrix(v): 
    list1 = []
    for i in range(k):
        c1 = list(R(X**i * v))
        list1.append(c1)
    return matrix(k,k,list1)

def random_small_vec_gen(Fqm,n,t):
    B = matrix(Fqm.base_ring(),t,m,0)
    while B.rank() != t:
        B = matrix(Fqm.base_ring(),[vector(Fqm.random_element()) for i in range(t)])
    C = matrix(Fqm.base_ring(),n,m,0)
    while C.rank() != t:
        C = matrix(Fqm.base_ring(),n,t,[Fqm.base_ring().random_element() for _ in range(n*t)]) * B
    return vector(Fqm,[C[i] for i in range(n)])

def vector_matrix(small_vector,length):
    return matrix(Fqm.base_ring(),length,m,[vector(small_vector[j]) for j in range(length)])
def basis_matrix_to_list(B):
    return [Fqm(x) for x in B.rows()]

randomP1 = R.random_element()
randomP2 = R.random_element()
print(randomP1 * randomP2 == randomP2 * randomP1)
print(circulant_matrix(randomP2)== matrix.circulant(list(randomP2)))  
print(vector(list(randomP1)) * circulant_matrix(randomP2) == vector(randomP1 * randomP2))
print(circulant_matrix(randomP2).transpose() * vector(list(randomP1)) == vector(randomP1 * randomP2))

v = random_vector(GF(q),k)
vPP = R(list(v))
randomPP = R(list(random_small_vec_gen(Fqm,k,t)))
print(vPP * randomPP == randomPP * vPP)
print(vector(list(randomPP)) * circulant_matrix(vPP) == vector(randomPP * vPP))
print(circulant_matrix(vPP).transpose() * vector(list(randomPP)) == vector(vPP*randomPP))

# check that vPP = R(list(v)) preserves rank weight
print(vector_matrix(vector(vPP*randomPP),k).rank() == vector_matrix(vector(randomPP),k).rank())

# check that vPP = R(list(v)) does not change support 
print(vector_matrix(vector(vPP*randomPP),k).row_space() == vector_matrix(vector(randomPP),k).row_space())
